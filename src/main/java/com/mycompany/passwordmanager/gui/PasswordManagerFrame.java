/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.passwordmanager.gui;

import com.mycompany.passwordmanager.bo.ProcessManager;
import com.mycompany.passwordmanager.run.RunPasswordManager;
import com.mycompany.passwordmanager.fix.Constants;
import com.mycompany.passwordmanager.util.Appearance;
import com.mycompany.passwordmanager.util.OptionsManager;
import com.mycompany.passwordmanager.util.smart.FileUtil;
import com.mycompany.passwordmanager.util.smart.SystemUtil;
import com.mycompany.passwordmanager.vo.holder.PasswordEntry;
import com.mycompany.passwordmanager.vo.holder.PasswordManagerContent;
import com.mycompany.passwordmanager.vo.holder.PasswordManagerWrapper;
import com.mycompany.passwordmanager.vo.config.OptionsGeneralSingelton;
import com.mycompany.passwordmanager.vo.config.OptionsSpecificSingelton;
import com.mycompany.passwordmanager.vo.types.GroupNotExistingType;
import com.mycompany.passwordmanager.vo.types.LanguageTyp;
import com.mycompany.passwordmanager.vo.types.LookAndFeelType;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.logging.Level;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Tom7668h
 */
public class PasswordManagerFrame extends javax.swing.JFrame {

    private static final Logger LOGGER = LogManager.getLogger(PasswordManagerFrame.class);
    private static final ResourceBundle resourceBundle = Appearance.loadLanguage();
    private static boolean TEMPORARY_GROUP = false;
    private static DefaultTableModel TABLE_MODEL;
    private static DefaultTreeModel TREE_MODEL;
    private static DefaultMutableTreeNode GROUP_ROOT_NODE;
    private static PasswordManagerWrapper PASSWORD_MANAGER;

    /** Creates new form PasswordManagerFrame
     * @param passwordManagerLoaded */
    public PasswordManagerFrame(PasswordManagerWrapper passwordManagerLoaded) {
        setIconImage(Toolkit.getDefaultToolkit().getImage(Constants.LOGO_PATH));
        initComponents();
        PasswordManagerFrame.PASSWORD_MANAGER = passwordManagerLoaded;
        initPasswordManager();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane4 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboboxGroup = new javax.swing.JComboBox<>();
        textfieldTitle = new javax.swing.JTextField();
        textfieldUserName = new javax.swing.JTextField();
        textfieldEmail = new javax.swing.JTextField();
        textfieldUrl = new javax.swing.JTextField();
        passwordfieldPassword = new javax.swing.JPasswordField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        textfieldDetails = new javax.swing.JTextArea();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenuItem28 = new javax.swing.JMenuItem();
        jMenuItem29 = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        jMenuItem31 = new javax.swing.JMenuItem();
        jMenuItem30 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        jMenuItem26 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem32 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MyPasswordManager");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Passwords");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("General");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Social Media");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Online Banking");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("E-Mail");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("<html><i>Recycling Bin</html>");
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "User Name", "Password", "E-Mail", "URL", "Details"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(table);

        jLabel1.setText("Group:");

        jLabel2.setText("Title:");

        jLabel3.setText("User Name:");

        jLabel4.setText("Password:");

        jLabel5.setText("E-Mail:");

        jLabel6.setText("URL:");

        jLabel7.setText("Details:");

        comboboxGroup.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboboxGroupPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        textfieldTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfieldTitleKeyReleased(evt);
            }
        });

        textfieldUserName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfieldUserNameKeyReleased(evt);
            }
        });

        textfieldEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfieldEmailKeyReleased(evt);
            }
        });

        textfieldUrl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfieldUrlKeyReleased(evt);
            }
        });

        passwordfieldPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordfieldPasswordKeyReleased(evt);
            }
        });

        jButton2.setToolTipText("");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        textfieldDetails.setColumns(20);
        textfieldDetails.setRows(5);
        textfieldDetails.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textfieldDetailsKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(textfieldDetails);

        jButton3.setText(resourceBundle.getString("BtnNew"));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cancel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Save");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addComponent(comboboxGroup, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(textfieldTitle)
                    .addComponent(textfieldUserName)
                    .addComponent(textfieldEmail)
                    .addComponent(textfieldUrl)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(passwordfieldPassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addContainerGap(7, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboboxGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textfieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textfieldUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(passwordfieldPassword))
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textfieldEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textfieldUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 627, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 468, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setIcon(com.mycompany.passwordmanager.util.Appearance.getIcon("save", "menu"));
        jMenuItem1.setText("New");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setIcon(com.mycompany.passwordmanager.util.Appearance.getIcon("save20", "menu"));
        jMenuItem2.setText("Open");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setIcon(com.mycompany.passwordmanager.util.Appearance.getIcon("save", "menu"));
        jMenuItem3.setText("Delete");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem4.setText("Save");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Save As");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);
        jMenu1.add(jSeparator2);

        jMenu3.setText("Import");

        jMenuItem10.setText("Import Manager");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuItem6.setText("Import Group");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem7.setText("Import Entry");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenu1.add(jMenu3);

        jMenu4.setText("Export");

        jMenuItem11.setText("Export Manager");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuItem8.setText("Export Group");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenuItem9.setText("Export Entry");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenu1.add(jMenu4);
        jMenu1.add(jSeparator3);

        jMenuItem12.setText("Logout");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem12);

        jMenuItem13.setText("Exit");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem13);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem14.setText("New Group");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem14);

        jMenuItem15.setText("Rename Group");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem15);

        jMenuItem16.setText("Delete Group");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem16);
        jMenu2.add(jSeparator5);

        jMenuItem18.setText("New Entry");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem18);

        jMenuItem19.setText("Rename Entry");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem19);

        jMenuItem20.setText("Delete Entry");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem20);

        jMenuItem21.setText("Duplicate Entry");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem21);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Search");

        jMenuItem27.setText("Find Group Name");
        jMenuItem27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem27ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem27);

        jMenuItem28.setText("Find Entry Title");
        jMenuItem28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem28ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem28);

        jMenuItem29.setText("Find Entry User Name");
        jMenuItem29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem29ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem29);
        jMenu5.add(jSeparator7);

        jMenuItem31.setText("Show Weak Passwords");
        jMenuItem31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem31ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem31);

        jMenuItem30.setText("Show Duplicate Passwords");
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem30ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem30);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Tools");

        jMenuItem24.setText("Generate Password");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem24);

        jMenuItem25.setText("Generate Password List");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem25);
        jMenu6.add(jSeparator6);

        jMenuItem26.setText("Options");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem26ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem26);

        jMenuBar1.add(jMenu6);

        jMenu8.setText("Look");

        jMenu9.setIcon(com.mycompany.passwordmanager.util.Appearance.getIcon("brightness", "menu"));
        jMenu9.setText("Appearance");

        jMenuItem17.setText("Light");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem17);

        jMenuItem32.setText("Dark");
        jMenuItem32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem32ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem32);

        jMenu8.add(jMenu9);

        jMenuBar1.add(jMenu8);

        jMenu7.setText("Help");

        jMenuItem22.setText("Info");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem22);

        jMenuItem23.setText("Help");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem23);

        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        fileNew();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        fileOpen();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        fileDelete();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        fileSave();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        fileSaveAs();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        fileImportManager();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        fileImportGroup();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        fileImportEntry();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        fileExportManager();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        fileExportGroup();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        fileExportEntry();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        fileLogout();
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        fileExit();
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        editNewGroup();
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        editRenameGroup();
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        editDeleteGroup();
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        editNewEntry();
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        editRenameEntry();
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        editDeleteEntry();
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        editDuplicateEntry();
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem27ActionPerformed
        searchFindGroupName();
    }//GEN-LAST:event_jMenuItem27ActionPerformed

    private void jMenuItem28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem28ActionPerformed
        searchFindEntryTitle();
    }//GEN-LAST:event_jMenuItem28ActionPerformed

    private void jMenuItem29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem29ActionPerformed
        searchFindEntryUserName();
    }//GEN-LAST:event_jMenuItem29ActionPerformed

    private void jMenuItem30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem30ActionPerformed
        searchShowDuplicatePasswords();
    }//GEN-LAST:event_jMenuItem30ActionPerformed

    private void jMenuItem31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem31ActionPerformed
        searchShowWeakPasswords();
    }//GEN-LAST:event_jMenuItem31ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
        toolGeneratePassword();
    }//GEN-LAST:event_jMenuItem24ActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
        toolGeneratePasswordList();
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void jMenuItem26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem26ActionPerformed
        toolOptions();
    }//GEN-LAST:event_jMenuItem26ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        helpInfo();
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        helpHelp();
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        groupSelected();
    }//GEN-LAST:event_jTree1MouseClicked

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        tableChanged();
    }//GEN-LAST:event_tableMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        copyPasswordToClipboard();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        showPassword();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        newEntry();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        deleteEntry();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        cancelEntry();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        saveEntry();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        lookAppearanceLight();
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem32ActionPerformed
        lookAppearanceDark();
    }//GEN-LAST:event_jMenuItem32ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        showSaveFileDialogWhileExiting();
    }//GEN-LAST:event_formWindowClosing

    private void textfieldDetailsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldDetailsKeyReleased
        enableEntryButtonsEntryModified();
    }//GEN-LAST:event_textfieldDetailsKeyReleased

    private void textfieldUrlKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldUrlKeyReleased
        enableEntryButtonsEntryModified();
    }//GEN-LAST:event_textfieldUrlKeyReleased

    private void textfieldEmailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldEmailKeyReleased
        enableEntryButtonsEntryModified();
    }//GEN-LAST:event_textfieldEmailKeyReleased

    private void passwordfieldPasswordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordfieldPasswordKeyReleased
        enableEntryButtonsEntryModified();
    }//GEN-LAST:event_passwordfieldPasswordKeyReleased

    private void textfieldUserNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldUserNameKeyReleased
        enableEntryButtonsEntryModified();
    }//GEN-LAST:event_textfieldUserNameKeyReleased

    private void textfieldTitleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldTitleKeyReleased
        enableEntryButtonsEntryModified();
    }//GEN-LAST:event_textfieldTitleKeyReleased

    private void comboboxGroupPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_comboboxGroupPopupMenuWillBecomeInvisible
        enableEntryButtonsEntryModified();
    }//GEN-LAST:event_comboboxGroupPopupMenuWillBecomeInvisible

    private void tableChanged() {
        if (PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList().isEmpty()) {
            return;
        }
        fillEntryFields(getSelectedEntry());
        enableEntryButtonsEntryModified();
    }

    private void groupSelected() {
        if (TEMPORARY_GROUP) {
            removeTemporaryGroup();
            return;
        }
        updateTable(false);
        clearEntryFields();
    }

    private void showPassword() {
        if (passwordfieldPassword.getEchoChar() == '•') {
            passwordfieldPassword.setEchoChar((char) 0);
        } else {
            passwordfieldPassword.setEchoChar('•');
        }
    }

    private void copyPasswordToClipboard() {
        final String password = new String(this.passwordfieldPassword.getPassword());
        SystemUtil.copyToClipboard(password);
    }

    private void saveEntry() {
        if (!isTableRowSelected()) {
            return;
        }
        final PasswordEntry selectedEntry = getSelectedEntry();
        if (!isTitleAvailable(textfieldTitle.getText(), true) && !selectedEntry.getTitle().equals(textfieldTitle.getText())) {
            return;
        }
        if (comboboxGroup.getSelectedItem() == null) {
            selectedEntry.setGroup(null);
        } else {
            selectedEntry.setGroup(String.valueOf(comboboxGroup.getSelectedItem()));
        }
        final String newTiltle = selectedEntry.getTitle().equals(textfieldTitle.getText()) ? null : textfieldTitle.getText();
        selectedEntry.setTitle(textfieldTitle.getText());
        selectedEntry.setUserName(textfieldUserName.getText());
        selectedEntry.setPassword(new String(passwordfieldPassword.getPassword()));
        selectedEntry.seteMail(textfieldEmail.getText());
        selectedEntry.setUrl(textfieldUrl.getText());
        selectedEntry.setDetails(textfieldDetails.getText());
        if (!TEMPORARY_GROUP) {
            updateTable(true);
        } else {
            updateTemoraryGroupEntries(newTiltle);
        }
        enableEntryButtonsEntryModified();
    }

    private void deleteEntry() {
        if (!isTableRowSelected() || showConfirmDialog("Are you sure you want to delete this entry?", "Delete Entry") != JOptionPane.YES_OPTION) {
            return;
        }
        final PasswordEntry selectedEntry = getSelectedEntry();
        PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList().remove(selectedEntry);
        updateTable(false);
        clearEntryFields();
    }

    private void cancelEntry() {
        if (!isTableRowSelected()) {
            return;
        }
        tableChanged();
        enableEntryButtonsEntryModified();
    }

    private void newEntry() {
        final String title = showInputDialog("Title of the new entry:", "New Entry");
        if (!isTitleAvailable(title, true)) {
            return;
        }
        final String group = getSelectedGroupName();
        final PasswordEntry newEntry = new PasswordEntry();
        newEntry.setTitle(title);
        newEntry.setGroup(group);
        PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList().add(newEntry);
        clearEntryFields();
        fillEntryFields(newEntry);
        updateTable(false);
        selectLastTableRow();
    }

    private void fileNew() {
        showSaveFileDialogWhileExiting();
        final RegisterDialog registerDialog = new RegisterDialog(this, true);
        registerDialog.setVisible(true);
        final PasswordManagerWrapper passwordManager = registerDialog.getPasswordManager();
        if (passwordManager != null) {
            PASSWORD_MANAGER = passwordManager;
            OptionsGeneralSingelton.getInstance().setFilePath(registerDialog.getPath());
            clearEntryFields();
            initPasswordManager();
        }
    }

    private void fileOpen() {
        showSaveFileDialogWhileExiting();
        final JFileChooser chooser = createFileChooser();
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            final String filePath = chooser.getSelectedFile().getAbsolutePath();
            final PasswordDialog passwordDialog = new PasswordDialog(this, true, filePath, true);
            passwordDialog.setVisible(true);
            PASSWORD_MANAGER = passwordDialog.getPasswordManagerHolder();
            OptionsGeneralSingelton.getInstance().setFilePath(filePath);
            clearEntryFields();
            initPasswordManager();
        }
    }

    private void fileDelete() {
        if (showConfirmDialog("Are you sure you want to delete all entries and all data?", "Delet File") == JOptionPane.YES_OPTION) {
            if (FileUtil.deleteFile(OptionsGeneralSingelton.getInstance().getFilePath())) {
                showMessageDialog("File with all data deleted!", "File Deleted");
            } else {
                showErrorMessageDialog("File could not be deleted!", "File Not Deleted");
            }
            fileLogout();
        }
    }

    private void fileSave() {
        saveFile(PASSWORD_MANAGER);
    }

    private void fileSaveAs() {
        final JFileChooser chooser = createFileChooser();
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            OptionsGeneralSingelton.getInstance().setFilePath(chooser.getSelectedFile().getAbsolutePath());
            fileSave();
        }
    }

    private void fileImportManager() {
        fileImportGroup();
    }

    private void fileImportGroup() {
        final PasswordManagerWrapper importedPasswordManagerWrapper = importPasswordManagerWrapper();
        if (importedPasswordManagerWrapper == null) {
            return;
        }
        for (String groupName : importedPasswordManagerWrapper.getPasswordManagerContent().getGroupList()) {
            if (!PASSWORD_MANAGER.getPasswordManagerContent().getGroupList().contains(groupName)) {
                addGroup(groupName);
            }
        }
        for (PasswordEntry importedEntry : importedPasswordManagerWrapper.getPasswordManagerContent().getPasswordList()) {
            addImportedGroup(importedEntry);
        }
        clearEntryFields();
        initPasswordManager();
    }

    private void fileImportEntry() {
        final PasswordManagerWrapper importedPasswordManagerWrapper = importPasswordManagerWrapper();
        if (importedPasswordManagerWrapper == null) {
            return;
        }
        for (PasswordEntry importedEntry : importedPasswordManagerWrapper.getPasswordManagerContent().getPasswordList()) {
            addImportedGroup(importedEntry);
            final String group = importedEntry.getGroup();
            if (OptionsSpecificSingelton.getInstance().getGroupNotExistingType() == GroupNotExistingType.CREATE_GROUP
                    && !PASSWORD_MANAGER.getPasswordManagerContent().getGroupList().contains(group)) {
                PASSWORD_MANAGER.getPasswordManagerContent().getGroupList().add(group);
            }
        }
        clearEntryFields();
        initPasswordManager();
    }

    private void fileExportManager() {
        final JFileChooser chooser = createFileChooser();
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            OptionsGeneralSingelton.getInstance().setFilePath(chooser.getSelectedFile().getAbsolutePath());
            saveFile(PASSWORD_MANAGER, chooser.getSelectedFile().getAbsolutePath() + chooser.getFileFilter().getDescription(), false);
        }
    }

    private void fileExportGroup() {
        final PasswordManagerContent passwordManagerContent = new PasswordManagerContent();
        final PasswordManagerWrapper passwordManagerWrapper = new PasswordManagerWrapper();
        final ArrayList<PasswordEntry> entryList = new ArrayList<>();
        final ArrayList<String> groupList = getAllSelectedGroups();
        if (groupList == null) {
            showErrorMessageDialog("Main group \"Password\" cannot be exported!", "Export Faild");
            return;
        } else if (groupList.isEmpty()) {
            showErrorMessageDialog("Export failed because no group is selected!", "Export Faild");
        }
        for (PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            if (groupList.contains(entry.getGroup())) {
                entryList.add(entry);
            }
        }
        passwordManagerContent.setGroupList(groupList);
        passwordManagerContent.setPasswordList(entryList);
        passwordManagerWrapper.setPasswordManagerContent(passwordManagerContent);
        passwordManagerWrapper.setMasterPassword(PASSWORD_MANAGER.getMasterPassword());
        final JFileChooser chooser = createFileChooser();
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            saveFile(passwordManagerWrapper, chooser.getSelectedFile().getAbsolutePath() + chooser.getFileFilter().getDescription(), false);
        }

    }

    private void fileExportEntry() {
        final PasswordManagerContent passwordManagerContent = new PasswordManagerContent();
        final PasswordManagerWrapper passwordManagerWrapper = new PasswordManagerWrapper();
        final ArrayList<PasswordEntry> selectedEntries = getAllSelectedEntries();
        if (selectedEntries.isEmpty()) {
            showErrorMessageDialog("No entry selected", "Export Faild");
            return;
        }
        if (showConfirmDialog("Should all used groups be exported?", "Export Used Groups") == JOptionPane.YES_OPTION) {
            final Set<String> groupSet = new HashSet<>();
            for (PasswordEntry entry : selectedEntries) {
                groupSet.add(entry.getGroup());
            }
            passwordManagerContent.setGroupList(new ArrayList<>(groupSet));
        }
        passwordManagerContent.setPasswordList(selectedEntries);
        passwordManagerWrapper.setPasswordManagerContent(passwordManagerContent);
        passwordManagerWrapper.setMasterPassword(PASSWORD_MANAGER.getMasterPassword());
        final JFileChooser chooser = createFileChooser();
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            saveFile(passwordManagerWrapper, chooser.getSelectedFile().getAbsolutePath() + chooser.getFileFilter().getDescription(), false);
        }
    }

    private void fileExit() {
        showSaveFileDialogWhileExiting();
        System.exit(0);
    }

    private void fileLogout() {
        showSaveFileDialogWhileExiting();
        this.dispose();
        RunPasswordManager.runMyPasswordManagerLogin();
    }

    private void editNewEntry() {
        newEntry();
    }

    private void editRenameEntry() {
        if (!isTableRowSelected()) {
            return;
        }
        final String title = showInputDialog("New title of the entry " + getSelectedEntryTitle() + ":", "Rename Entry");
        if (!isTitleAvailable(title, true)) {
            return;
        }
        for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            if (entry.getTitle().equals(getSelectedEntryTitle())) {
                entry.setTitle(title);
            }
        }
        updateTable(true);
    }

    private void editDeleteEntry() {
        deleteEntry();
    }

    private void editDuplicateEntry() {
        if (!isTableRowSelected()) {
            return;
        }
        final String title = showInputDialog("New title of the duplicated entry " + getSelectedEntryTitle() + ":", "Duplicate Entry");
        if (!isTitleAvailable(title, true)) {
            return;
        }
        final PasswordEntry entry = new PasswordEntry(getSelectedEntry());
        entry.setTitle(title);
        PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList().add(entry);
        updateTable(false);
        selectLastTableRow();
    }

    private void editNewGroup() {
        final String groupName = showInputDialog("What should the new group be called?", "New Group");
        if (!isGroupNameAvailable(groupName)) {
            return;
        }
        addGroup(groupName);
        clearEntryFields();
    }

    private void editRenameGroup() {
        final DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if (selectedNode == GROUP_ROOT_NODE) {
            showErrorMessageDialog("Main group cannot be renamed!", "Rename Group");
            return;
        }
        final String oldGroupName = getSelectedGroupName();
        final String newGroupName = showInputDialog("New group name for the goup " + oldGroupName + ":", "Rename Group");
        if (newGroupName == null || !isGroupNameAvailable(newGroupName)) {
            return;
        }
        for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            if (oldGroupName.equals(entry.getGroup())) {
                entry.setGroup(newGroupName);
            }
        }
        PASSWORD_MANAGER.getPasswordManagerContent().getGroupList().set(PASSWORD_MANAGER.getPasswordManagerContent().getGroupList().indexOf(oldGroupName), newGroupName);
        selectedNode.setUserObject(newGroupName);
        jTree1.repaint();
        initComboBoxGroups();
        if (table.getSelectedRow() != -1) {
            fillEntryFields(getSelectedEntry());
        }
    }

    private void editDeleteGroup() {
        final DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if (GROUP_ROOT_NODE == selectedNode) {
            showMessageDialog("Main group cannot be deleted", "Delete Group");
            return;
        }
        if (showConfirmDialog("Are you sure you want to delete this group?\r\nAll entries that belong to this group will without a group!", "Delete Group") != JOptionPane.YES_OPTION) {
            return;
        }
        PASSWORD_MANAGER.getPasswordManagerContent().getGroupList().remove(getSelectedGroupName());
        TREE_MODEL.removeNodeFromParent(selectedNode);
        clearEntryFields();
        initComboBoxGroups();
        jTree1.setSelectionPath(new TreePath(TREE_MODEL.getPathToRoot(GROUP_ROOT_NODE)));
        updateTable(false);
    }

    private void helpHelp() {
        if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
            try {
                Desktop.getDesktop().browse(new URI(Constants.HELP_LINK));
            } catch (IOException | URISyntaxException ex) {
                java.util.logging.Logger.getLogger(PasswordManagerFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void helpInfo() {
        final AboutDialog aboutDialog = new AboutDialog(this, false);
        aboutDialog.setVisible(true);
    }

    private void searchFindGroupName() {
        final String groupName = showInputDialog("What group names are you looking for?", "Search Group Name");
        if (groupName == null || groupName.isBlank()) {
            return;
        }
        if (!setGroup(groupName)) {
            showErrorMessageDialog("No group named " + groupName + " found!", "Group Not Found");
        }
    }

    private void searchFindEntryTitle() {
        final String entryTitle = showInputDialog("What entry title are you looking for?", "Search Entry Title");
        if (entryTitle == null || entryTitle.isBlank()) {
            return;
        }
        for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            if (entry.getTitle().equals(entryTitle)) {
                setGroup(entry.getGroup());
                for (int row = 0; row < TABLE_MODEL.getRowCount(); row++) {
                    if (getEntryTitleFromTable(row).equals(entry.getTitle())) {
                        table.setRowSelectionInterval(row, row);
                        updateTable(true);
                        fillEntryFields(entry);
                        return;
                    }
                }
            }
        }
        showErrorMessageDialog("No entry titled " + entryTitle + " found!", "Entry Not Found");
    }

    private void searchFindEntryUserName() {
        removeTemporaryGroup(true);
        final String entryUserName = showInputDialog("What entry user name are you looking for?", "Search Entry User Name");
        if (entryUserName == null || entryUserName.isBlank()) {
            return;
        }
        ArrayList<PasswordEntry> entryList = new ArrayList<>();
        for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            if (entry.getUserName().equals(entryUserName)) {
                entryList.add(entry);
            }
        }
        if (entryList.isEmpty()) {
            showErrorMessageDialog("No entry with user name " + entryUserName + " found!", "Entry Not Found");
            return;
        }
        createTemoraryGroupWithEntries("User Name: " + entryList.get(0).getUserName(), entryList);
    }

    private void searchShowWeakPasswords() {
        Pattern lowercaseLetter = Pattern.compile("[a-z]");
        Pattern uppercaseLetter = Pattern.compile("[A-z]");
        Pattern digit = Pattern.compile("[0-9]");
        Pattern specialCharacter = Pattern.compile("[!@#$%&*()_+=|<>?{}\\[\\]~-]");
        ArrayList<PasswordEntry> weakPasswordList = new ArrayList<>();
        for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            final String password = entry.getPassword();
            if (password == null) {
                continue;
            }
            Matcher hasLowercaseLetter = lowercaseLetter.matcher(password);
            Matcher hasUppercaseLetter = uppercaseLetter.matcher(password);
            Matcher hasDigit = digit.matcher(password);
            Matcher hasSpecialCharacter = specialCharacter.matcher(password);
            if (!(hasLowercaseLetter.find() && hasUppercaseLetter.find() && hasDigit.find() && hasSpecialCharacter.find() && password.length() >= 12)) {
                weakPasswordList.add(entry);
            }
        }
        if (!weakPasswordList.isEmpty()) {
            createTemoraryGroupWithEntries("Weak Passwords", weakPasswordList);
        } else {
            showMessageDialog("(No weak passwords found!", "Weak Passwords");
        }
        enableEntryButtons(false);
    }

    private void searchShowDuplicatePasswords() {
        final Set<String> uniquePasswordSet = new HashSet<>();
        final Set<String> duplicatePasswordSet = new HashSet<>();
        for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            if (!uniquePasswordSet.add(entry.getPassword())) {
                duplicatePasswordSet.add(entry.getPassword());
            }
        }
        final ArrayList<PasswordEntry> duplicatePasswordList = new ArrayList<>();
        for (final String password : duplicatePasswordSet) {
            for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
                if (entry.getPassword().equals(password)) {
                    duplicatePasswordList.add(entry);
                }
            }
        }
        if (!duplicatePasswordList.isEmpty()) {
            createTemoraryGroupWithEntries("Duplicate Passwords", duplicatePasswordList);
        } else {
            showMessageDialog("No duplicate passwords found!", "Duplicate Passwords");
        }
    }

    private void toolGeneratePassword() {
        JOptionPane.showMessageDialog(this, new GeneratePasswordPanel(), "Generate Password", JOptionPane.PLAIN_MESSAGE);
    }

    private void toolGeneratePasswordList() {
        JOptionPane.showMessageDialog(this, new GeneratePasswordListPanel(), "Generate Password", JOptionPane.PLAIN_MESSAGE);
    }

    private void toolOptions() {
        OptionsDialog optionsDialog = new OptionsDialog(this, true, PASSWORD_MANAGER);
        optionsDialog.setVisible(true);
    }

    private void lookAppearanceLight() {
        updateLookAndFeel(LookAndFeelType.LIGHT);
    }

    private void lookAppearanceDark() {
        updateLookAndFeel(LookAndFeelType.DARK);

    }

    private PasswordManagerWrapper importPasswordManagerWrapper() {
        final JFileChooser chooser = createFileChooser();
        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            return null;
        }
        final String filePath = chooser.getSelectedFile().getAbsolutePath();
        final PasswordDialog passwordDialog = new PasswordDialog(this, true, filePath, false);
        passwordDialog.setVisible(true);
        return passwordDialog.getPasswordManagerHolder();
    }

    private PasswordEntry findEntryFromTitle(String title) {
        for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            if (entry.getTitle().equals(title)) {
                return entry;
            }
        }
        return null;
    }

    private PasswordEntry getSelectedEntry() {
        return findEntryFromTitle(getSelectedEntryTitle());
    }

    private ArrayList<PasswordEntry> getAllSelectedEntries() {
        final ArrayList<PasswordEntry> selectedEtries = new ArrayList<>();
        final int[] selectedEntryRows = table.getSelectedRows();
        for (int rowIterator = 0; rowIterator < selectedEntryRows.length; rowIterator++) {
            final String title = (String) TABLE_MODEL.getValueAt(selectedEntryRows[rowIterator], 0);
            selectedEtries.add(findEntryFromTitle(title));
        }
        return selectedEtries;
    }

    private ArrayList<String> getAllSelectedGroups() {
        final ArrayList<String> selectedGroups = new ArrayList<>();
        final TreePath[] selectedNodes = (TreePath[]) jTree1.getSelectionPaths();
        for (TreePath treePath : selectedNodes) {
            final DefaultMutableTreeNode node = (DefaultMutableTreeNode) treePath.getLastPathComponent();
            if (node == GROUP_ROOT_NODE) {
                return null;
            }
            selectedGroups.add((String) node.getUserObject());
        }
        return selectedGroups;
    }

    private JFileChooser createFileChooser() {
        final JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileNameExtensionFilter(".pmcd", "pmcd"));
        chooser.setCurrentDirectory(new File("C:\\"));
        return chooser;
    }

    private String hidePassword(String text) {
        if (text == null) {
            return "";
        }
        String hiddenText = "";
        for (int character = 0; character < text.length(); character++) {
            hiddenText += "•";
        }
        return hiddenText;
    }

    private String getEntryTitleFromTable(int row) {
        return (String) TABLE_MODEL.getValueAt(row, 0);
    }

    private String getSelectedEntryTitle() {
        return (String) TABLE_MODEL.getValueAt(table.getSelectedRow(), 0);
    }

    private String getSelectedGroupName() {
        final DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        return (String) selectedNode.getUserObject();
    }

    private String showInputDialog(String message, String title) {
        return JOptionPane.showInputDialog(this, message, title, JOptionPane.PLAIN_MESSAGE);
    }

    private int showConfirmDialog(String message, String title) {
        return JOptionPane.showConfirmDialog(this, message, title, JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
    }

    private boolean isGroupNameAvailable(String newGroup) {
        if (newGroup == null || newGroup.equals("")) {
            showErrorMessageDialog("The group name can not be empty!", "Group Name Empty");
            return false;
        }
        for (final String group : PASSWORD_MANAGER.getPasswordManagerContent().getGroupList()) {
            if (newGroup.equals(group)) {
                showErrorMessageDialog("This group name is already assigned!", "Group Assigned");
                return false;
            }
        }
        return true;
    }

    private boolean isTitleAvailable(String title, boolean interactive) {
        if (title == null) {
            return false;
        }
        if (title.equals("")) {
            if (interactive) {
                showErrorMessageDialog("The title of the new entry can not be empty!", "Title Empty");
            }
            return false;
        }
        for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            if (entry.getTitle().equals(title) && (interactive ? !title.equals(getSelectedEntryTitle()) : true)) {
                if (interactive) {
                    showErrorMessageDialog("This title is already assigned!", "Title Assigned");
                }
                return false;
            }
        }
        return true;
    }

    private boolean isTableRowSelected() {
        if (table.getSelectedRow() == -1) {
            showMessageDialog("There is no entry selected, please select an entry!", "No Entry Selected");
            return false;
        }
        return true;
    }

    private boolean isEntryModified(PasswordEntry entry) {
        final boolean modified = !(textfieldTitle.getText().equals(entry.getTitle())
                && textfieldUserName.getText().equals(entry.getUserName())
                && textfieldEmail.getText().equals(entry.geteMail())
                && textfieldUrl.getText().equals(entry.getUrl())
                && textfieldDetails.getText().equals(entry.getDetails())
                && (comboboxGroup.getSelectedItem() == null ? entry.getGroup() == null : ((String) comboboxGroup.getSelectedItem()).equals(entry.getGroup()))
                && new String(passwordfieldPassword.getPassword()).equals(entry.getPassword()));
        return modified;
    }

    private boolean setGroup(String groupName) {
        for (int nodeIndex = 0; nodeIndex < GROUP_ROOT_NODE.getChildCount(); nodeIndex++) {
            final DefaultMutableTreeNode node = (DefaultMutableTreeNode) GROUP_ROOT_NODE.getChildAt(nodeIndex);
            if (node.getUserObject().equals(groupName)) {
                jTree1.setSelectionPath(new TreePath(TREE_MODEL.getPathToRoot(node)));
                updateTable(false);
                return true;
            }
        }
        return false;
    }

    private void saveFile(PasswordManagerWrapper passwordManagerWrapper, String filePath, boolean showSuccessfulSave, boolean saveConfig) {
        final ProcessManager processManager = new ProcessManager();
        if (processManager.saveFile(passwordManagerWrapper, filePath, saveConfig)) {
            if (showSuccessfulSave) {
                showMessageDialog("File saved successfully!", "Save File");
            }
        } else {
            showErrorMessageDialog("File could not be saved!", "File Not Saved");
        }
    }

    private void saveFile(PasswordManagerWrapper passwordManagerWrapper, String filePath, boolean saveConfig) {
        saveFile(passwordManagerWrapper, filePath, true, saveConfig);
    }

    private void saveFile(PasswordManagerWrapper passwordManagerWrapper, String filePath) {
        saveFile(passwordManagerWrapper, filePath, true);
    }

    private void saveFile(PasswordManagerWrapper passwordManagerWrapper) {
        saveFile(passwordManagerWrapper, OptionsGeneralSingelton.getInstance().getFilePath());
    }

    private void initPasswordManager() {
        TABLE_MODEL = (DefaultTableModel) table.getModel();
        TABLE_MODEL.setRowCount(0);
        GROUP_ROOT_NODE = ((DefaultMutableTreeNode) jTree1.getModel().getRoot());
        for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            addEntryRow(entry);
        }
        initTreeGroups();
        initComboBoxGroups();
        initEntryTable();
        enableEntryFields(false);
        enableEntryButtons(false);
    }

    private void initEntryTable() {
        if (PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList() == null) {
            PASSWORD_MANAGER.getPasswordManagerContent().setPasswordList(new ArrayList<>());
        }
    }

    private void initComboBoxGroups() {
        comboboxGroup.removeAllItems();
        for (final String groupName : PASSWORD_MANAGER.getPasswordManagerContent().getGroupList()) {
            comboboxGroup.addItem(groupName);
        }
        comboboxGroup.setSelectedIndex(-1);
    }

    private void initTreeGroups() {
        jTree1.setModel(new DefaultTreeModel(new DefaultMutableTreeNode("Password")));
        final DefaultMutableTreeNode rootNode = ((DefaultMutableTreeNode) jTree1.getModel().getRoot());
        TREE_MODEL = (DefaultTreeModel) jTree1.getModel();
        for (final String groupName : PASSWORD_MANAGER.getPasswordManagerContent().getGroupList()) {
            TREE_MODEL.insertNodeInto(new DefaultMutableTreeNode(groupName), rootNode, rootNode.getChildCount());
        }
        jTree1.setSelectionPath(new TreePath(TREE_MODEL.getPathToRoot(rootNode)));
        jTree1.expandPath(new TreePath(rootNode));
        GROUP_ROOT_NODE = rootNode;
    }

    private void createTemoraryGroupWithEntries(String grupeName, ArrayList<PasswordEntry> entryList) {
        addTemporaryGroup(grupeName);
        fillTabelFromEntryList(entryList);
        TEMPORARY_GROUP = true;
    }

    private void updateTemoraryGroupEntries(String newTiltle) {
        final int selectedRow = table.getSelectedRow();
        final ArrayList<PasswordEntry> entryList = new ArrayList<>();
        for (int rep = 0; rep < TABLE_MODEL.getRowCount(); rep++) {
            PasswordEntry currentEntry;
            if (newTiltle != null && rep == selectedRow) {
                currentEntry = findEntryFromTitle(newTiltle);
                currentEntry.setTitle(newTiltle);
            } else {
                currentEntry = findEntryFromTitle(getEntryTitleFromTable(rep));
            }
            entryList.add(currentEntry);
        }
        fillTabelFromEntryList(entryList);
        table.setRowSelectionInterval(selectedRow, selectedRow);
    }

    private void addTemporaryGroup(String name) {
        final DefaultMutableTreeNode newGroup = new DefaultMutableTreeNode("<html><i>" + name + "</i></html>");
        TREE_MODEL.insertNodeInto(newGroup, GROUP_ROOT_NODE, GROUP_ROOT_NODE.getChildCount());
        jTree1.setSelectionPath(new TreePath(TREE_MODEL.getPathToRoot(newGroup)));
    }

    private void removeTemporaryGroup(boolean removeRegardless) {
        final DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) TREE_MODEL.getChild(GROUP_ROOT_NODE, TREE_MODEL.getChildCount(GROUP_ROOT_NODE) - 1);
        final String selectedGroupName = (String) selectedNode.getUserObject();
        if (!removeRegardless && getSelectedGroupName().equals(selectedGroupName)) {
            return;
        }
        boolean temporaryGroup = true;
        for (final String groupName : PASSWORD_MANAGER.getPasswordManagerContent().getGroupList()) {
            if (groupName.equals(selectedGroupName)) {
                temporaryGroup = false;
            }
        }
        if (temporaryGroup) {
            TEMPORARY_GROUP = false;
            TREE_MODEL.removeNodeFromParent(selectedNode);
            if (!removeRegardless) {
                groupSelected();
            }
        }
    }

    private void removeTemporaryGroup() {
        removeTemporaryGroup(false);
    }

    private void updateTable(boolean selectEditedRow) {
        final String selectedGroup = jTree1.getSelectionPath().getLastPathComponent().toString();
        final int selectedRow = table.getSelectedRow();
        TABLE_MODEL.setRowCount(0);
        for (final PasswordEntry entry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
            if (selectedGroup.equals(Constants.MAIN_GROUP_NAME) || selectedGroup.equals(entry.getGroup())) {
                addEntryRow(entry);
            }
        }
        if (selectEditedRow && TABLE_MODEL.getRowCount() > selectedRow) {
            table.setRowSelectionInterval(selectedRow, selectedRow);
        }
    }

    private void fillTabelFromEntryList(ArrayList<PasswordEntry> entryList) {
        TABLE_MODEL.setRowCount(0);
        for (final PasswordEntry entry : entryList) {
            addEntryRow(entry);
        }
    }

    private void clearEntryFields() {
        comboboxGroup.setSelectedIndex(-1);
        textfieldTitle.setText("");
        textfieldUserName.setText("");
        passwordfieldPassword.setText("");
        textfieldEmail.setText("");
        textfieldUrl.setText("");
        textfieldDetails.setText("");
        enableEntryFields(false);
        enableEntryButtons(false);
    }

    private void addEntryRow(PasswordEntry entry) {
        TABLE_MODEL.addRow(new Object[]{
            entry.getTitle(),
            entry.getUserName(),
            hidePassword(entry.getPassword()),
            entry.geteMail(),
            entry.getUrl(),
            entry.getDetails()});
    }

    private void showMessageDialog(String message, String title) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.PLAIN_MESSAGE);
    }

    private void showErrorMessageDialog(String message, String title) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
    }

    private void selectLastTableRow() {
        final int rowIndex = TABLE_MODEL.getRowCount() - 1;
        if (rowIndex >= 0) {
            table.setRowSelectionInterval(rowIndex, rowIndex);
        }
    }

    private void fillEntryFields(PasswordEntry entry) {
        if (entry.getGroup() == null) {
            comboboxGroup.setSelectedIndex(-1);
        }
        comboboxGroup.setSelectedItem(entry.getGroup());
        textfieldTitle.setText(entry.getTitle());
        textfieldUserName.setText(entry.getUserName());
        passwordfieldPassword.setText(entry.getPassword());
        textfieldEmail.setText(entry.geteMail());
        textfieldUrl.setText(entry.getUrl());
        textfieldDetails.setText(entry.getDetails());
        enableEntryFields(true);
        enableEntryButtons(true);
    }

    private void updateIcons() {
        this.jMenu9.setIcon(Appearance.getIcon("brightness", "menu"));
    }

    private void addGroup(String groupName) {
        PASSWORD_MANAGER.getPasswordManagerContent().getGroupList().add(groupName);
        final DefaultMutableTreeNode newGroup = new DefaultMutableTreeNode(groupName);
        TREE_MODEL.insertNodeInto(newGroup, GROUP_ROOT_NODE, GROUP_ROOT_NODE.getChildCount());
        jTree1.setSelectionPath(new TreePath(TREE_MODEL.getPathToRoot(newGroup)));
        initComboBoxGroups();
        updateTable(false);
    }

    private void enableEntryFields(boolean enable) {
        comboboxGroup.setEnabled(enable);
        textfieldTitle.setEnabled(enable);
        textfieldUserName.setEnabled(enable);
        passwordfieldPassword.setEnabled(enable);
        textfieldEmail.setEnabled(enable);
        textfieldUrl.setEnabled(enable);
        textfieldDetails.setEnabled(enable);
        jButton1.setEnabled(enable);
        jButton2.setEnabled(enable);
    }

    private void enableEntryButtons(boolean enable) {
        jButton4.setEnabled(enable);
        jButton5.setEnabled(enable);
        jButton6.setEnabled(enable);
        if (TEMPORARY_GROUP) {
            jButton3.setEnabled(false);
        } else {
            jButton3.setEnabled(true);
        }
    }

    private void enableEntryButtonsEntryModified() {
        final boolean modified = isEntryModified(getSelectedEntry());
        jButton5.setEnabled(modified);
        jButton6.setEnabled(modified);
    }

    private void showSaveFileDialogWhileExiting() {
        final ProcessManager processManager = new ProcessManager();
        final PasswordManagerWrapper passwordManagerWrapper = processManager.loadFile(OptionsGeneralSingelton.getInstance().getFilePath(), PASSWORD_MANAGER.getMasterPassword());
        if (passwordManagerWrapper == null || !passwordManagerWrapper.equals(PASSWORD_MANAGER)) {
            if (showConfirmDialog("Do you want to save before leaving?", "Save File") == JOptionPane.YES_OPTION) {
                saveFile(PASSWORD_MANAGER, OptionsGeneralSingelton.getInstance().getFilePath(), false);
            }
        }
    }

    private void updateLookAndFeel(LookAndFeelType type) {
        Appearance.setLookAndFeel(type);
        SwingUtilities.updateComponentTreeUI(this);
        updateIcons();
        OptionsGeneralSingelton.getInstance().setLookAndFeel(type);
        OptionsManager.saveGeneralOptions();
    }

    private void addImportedGroup(PasswordEntry entry) {
        if (isTitleAvailable(entry.getTitle(), false)) {
            PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList().add(entry);
        } else {
            for (final PasswordEntry currentEntry : PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList()) {
                if (currentEntry.getTitle().equals(entry.getTitle())) {
                    PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList().remove(currentEntry);
                    PASSWORD_MANAGER.getPasswordManagerContent().getPasswordList().add(entry);
                    break;
                }
            }
        }
    }

    /*
    * TODO LIST
    *
    *
    *
    *
    * COMPLETE LIST
    *
    * - rename all gui elements
    * - create shortcuts
    * - create unit tests
    * - translation german & english
    * - use icons
    * - logging & comments
    *
    *
    * FEATURE LIST
    *
    * - inactive logout timer
    * - make conditions for weak passwords configurable
    * - set password for export
    * - import rename entry interactiv / automaticly 
    * 
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboboxGroup;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem28;
    private javax.swing.JMenuItem jMenuItem29;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem31;
    private javax.swing.JMenuItem jMenuItem32;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JTree jTree1;
    private javax.swing.JPasswordField passwordfieldPassword;
    private javax.swing.JTable table;
    private javax.swing.JTextArea textfieldDetails;
    private javax.swing.JTextField textfieldEmail;
    private javax.swing.JTextField textfieldTitle;
    private javax.swing.JTextField textfieldUrl;
    private javax.swing.JTextField textfieldUserName;
    // End of variables declaration//GEN-END:variables
}
